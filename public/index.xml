<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AMRIUNIX</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Sep 2020 06:01:23 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alfresco Reset Password Add-on - 0day Vulnerabilities</title>
      <link>http://localhost:1313/posts/alfresco-reset-password-add-on-0-day-vulnerabilities/</link>
      <pubDate>Thu, 17 Sep 2020 06:01:23 +0100</pubDate>
      <guid>http://localhost:1313/posts/alfresco-reset-password-add-on-0-day-vulnerabilities/</guid>
      <description>This post is as much about the penetration testing process and the 0-day approach as it is about the vulnerability. I discovered a 0-day vulnerability in one of the most used plugin for Password Reset on Alfresco Content Services framework.&#xA;TL;DR Link to heading I was performing a penetration test recently and really hadn’t found much on the scoped server. So i start by reviewing the application components hoping to find 0-day vulnerabilities, and indeed i found an intrusting third-party component in the application which seems to be vulnerable.</description>
    </item>
    <item>
      <title>OAuth 2.0 - What could go wrong</title>
      <link>http://localhost:1313/posts/oauth-2.0-what-could-go-wrong/</link>
      <pubDate>Sun, 30 Aug 2020 15:37:11 +0100</pubDate>
      <guid>http://localhost:1313/posts/oauth-2.0-what-could-go-wrong/</guid>
      <description>Nowadays modern web applications may implement or use OAuth 2.0 for there own services. In this post we will understand how OAuth 2.0 works and how it can present vulnerabilities.&#xA;TL;DR Link to heading OAuth 2.0 is an authorization framework defines a set of protocols that allow an application (Client) to obtain authorization grants (permissions) from Authorization-Server for certain resources/actions of a Resource-Owner from the Resource-Server.&#xA;Terminology Link to heading Let&amp;rsquo;s define each actor of an OAuth2.</description>
    </item>
    <item>
      <title>Windows Kernel Shellcode : TokenStealer</title>
      <link>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</link>
      <pubDate>Mon, 03 Feb 2020 16:25:30 +0100</pubDate>
      <guid>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</guid>
      <description>A typical approach involving Reverse/Bind shellcode won&amp;rsquo;t prove effective for Windows Kernel Exploitation. More often than not, practitioners resort to techniques such as Nulling out ACLs, Enabling privileges or Replacing process token.&#xA;TL;DR Link to heading This article concentrates primarily on the &amp;ldquo;Process Token Replacement&amp;rdquo; Shellcode. The concept revolves around locating a privileged process and transferring its token to an unprivileged process, usually the parent process. (It&amp;rsquo;s important to note that an exploit (exploit.</description>
    </item>
    <item>
      <title>From read@GLIBC to RCE in X86_64</title>
      <link>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</link>
      <pubDate>Fri, 29 Nov 2019 17:03:16 +0100</pubDate>
      <guid>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</guid>
      <description>While playing some pwn in HackZone CTF, i figured out a new technique for Arbitrary Code Execution only by using the read function from libc.&#xA;TL;DR Link to heading It&amp;rsquo;s almost impossible for a security research to exploit a binary only with Arbitrary Write, because in real world you need to leak some data (Specially when ASLR is enabled) and then jump to the right place. However i got an idea of how to get RCE using only read@GLIBC (Arbitrary Write) on a X86_64 platform.</description>
    </item>
    <item>
      <title>CVE-2019-18276 - Suidbash</title>
      <link>http://localhost:1313/posts/cve-2019-18276-suidbash/</link>
      <pubDate>Thu, 28 Nov 2019 23:13:39 +0100</pubDate>
      <guid>http://localhost:1313/posts/cve-2019-18276-suidbash/</guid>
      <description>This exploit was initially based on an older vulnerability back in 1999 (suidperl). Now after 20 years in 2019 we found the same vulnerability in bash (CVE-2019-18276) was discovered by Ian Pudney.&#xA;TL;DR Link to heading The root cause of this vulnerability is that bash doesn&amp;rsquo;t handle setuid bit correctly, by default bash will drop the SUID privilege if the Real UID is different from the Effective UID, but it forget to drop also the Saved UID.</description>
    </item>
    <item>
      <title>Memcached Enumeration</title>
      <link>http://localhost:1313/posts/memcached-enumeration/</link>
      <pubDate>Mon, 04 Feb 2019 20:43:23 +0100</pubDate>
      <guid>http://localhost:1313/posts/memcached-enumeration/</guid>
      <description>A server cache is an information technology for the temporary storage of data, to reduce server lag. I find a lot of those technologies in my daily work while doing penetration testing. Memcached is one of them and I&amp;rsquo;d like to talk about it and how to extract informations from it.&#xA;TL;DR Link to heading Memcached is a distributed memory object caching system, is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.</description>
    </item>
    <item>
      <title>Sigreturn-Oriented Programming (SROP)</title>
      <link>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</link>
      <pubDate>Sun, 04 Nov 2018 11:23:06 +0100</pubDate>
      <guid>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</guid>
      <description>Sigreturn-oriented programming (SROP) is a exploit development technique used to execute code, this attack employs the same basic assumptions behind the return-oriented programming (ROP) technique.&#xA;TL;DR Link to heading When a signal occurs, the kernel “pauses” the process’s execution in order to jump to a signal handler routine. In order to safely resume the execution after the handler, the context of that process is pushed/saved on the stack (registers, flags, instruction pointer, stack pointer etc).</description>
    </item>
    <item>
      <title>CVE-2007-2447 - Samba usermap script</title>
      <link>http://localhost:1313/posts/cve-2007-2447-samba-usermap-script/</link>
      <pubDate>Fri, 03 Aug 2018 22:00:06 +0100</pubDate>
      <guid>http://localhost:1313/posts/cve-2007-2447-samba-usermap-script/</guid>
      <description>Samba 3.0.0 - 3.0.25rc3 are subject for Remote Command Injection Vulnerability (CVE-2007-2447), allows remote attackers to execute arbitrary commands by specifying a username containing shell meta characters.&#xA;TL;DR Link to heading The root cause is passing unfiltered user input provided via MS-RPC calls to /bin/sh when invoking non-default &amp;quot;username map script&amp;quot; configuration option in smb.conf, so no authentication is needed to exploit this vulnerability.&#xA;Source Link to heading ./source/lib/username.c&#xA;/* first try the username map script */ if ( *cmd ) { char **qlines; pstring command; int numlines, ret, fd; pstr_sprintf( command, &amp;#34;%s \&amp;#34;%s\&amp;#34;&amp;#34;, cmd, user ); DEBUG(10,(&amp;#34;Running [%s]\n&amp;#34;, command)); ret = smbrun(command, &amp;amp;fd); DEBUGADD(10,(&amp;#34;returned [%d]\n&amp;#34;, ret)); if ( ret !</description>
    </item>
    <item>
      <title>Deep dive into DNS messages</title>
      <link>http://localhost:1313/posts/deep-dive-into-dns-messages/</link>
      <pubDate>Thu, 02 Aug 2018 18:51:42 +0100</pubDate>
      <guid>http://localhost:1313/posts/deep-dive-into-dns-messages/</guid>
      <description>In this Post, I&amp;rsquo;d like to talk about the packet structure of DNS as well as how to implement it into python script to start asking and receiving answers about domain resolution.&#xA;TL;DR Link to heading DNS is used to map human-readable domain names (such as example.com) to machine-readable IP addresses (like 193.84.16.134). To use DNS, we send a query to a DNS server. This query contains the domain name we’re looking up.</description>
    </item>
    <item>
      <title>HC 06 Bluetooth in Ubuntu</title>
      <link>http://localhost:1313/posts/hc-06-bluetooth-in-ubuntu/</link>
      <pubDate>Thu, 02 Aug 2018 12:09:56 +0100</pubDate>
      <guid>http://localhost:1313/posts/hc-06-bluetooth-in-ubuntu/</guid>
      <description>TL;DR Link to heading In this article we are going see how to connect HC-06 Bluetooth in Ubuntu, which is commonly used in embedded systems such as arduino. But this time we will see how to use it with linux in order to interact with bluetooth channels.&#xA;Configuration Link to heading So first thing first we need to pair this device with ubuntu using the Bluetooth GUI in Ubuntu .</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Wed, 01 Aug 2018 22:36:24 +0100</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>$ whoami I go by the name Oussama Amri, experienced and dedicated cybersecurity professional with over a decade of hands-on experience in the field. Known in the community as amriunix, I have honed my skills through years of self-guided learning and practical application, including participation in CTFs challenges. My journey has taken me from a pentesting role by auditing infrastructure, web applications, and performn source code review to an application security engineering.</description>
    </item>
  </channel>
</rss>
