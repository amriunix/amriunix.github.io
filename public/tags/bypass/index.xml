<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bypass on AMRIUNIX</title>
    <link>http://localhost:1313/tags/bypass/</link>
    <description>Recent content in Bypass on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Sep 2020 06:01:23 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/bypass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alfresco Reset Password Add-on - 0day Vulnerabilities</title>
      <link>http://localhost:1313/posts/alfresco-reset-password-add-on-0-day-vulnerabilities/</link>
      <pubDate>Thu, 17 Sep 2020 06:01:23 +0100</pubDate>
      <guid>http://localhost:1313/posts/alfresco-reset-password-add-on-0-day-vulnerabilities/</guid>
      <description>This post is as much about the penetration testing process and the 0-day approach as it is about the vulnerability. I discovered a 0-day vulnerability in one of the most used plugin for Password Reset on Alfresco Content Services framework.&#xA;TL;DR Link to heading I was performing a penetration test recently and really hadnâ€™t found much on the scoped server. So i start by reviewing the application components hoping to find 0-day vulnerabilities, and indeed i found an intrusting third-party component in the application which seems to be vulnerable.</description>
    </item>
  </channel>
</rss>
