<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploit on AMRIUNIX</title>
    <link>http://localhost:1313/tags/exploit/</link>
    <description>Recent content in Exploit on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Feb 2020 16:25:30 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Kernel Shellcode : TokenStealer</title>
      <link>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</link>
      <pubDate>Mon, 03 Feb 2020 16:25:30 +0100</pubDate>
      <guid>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</guid>
      <description>A typical approach involving Reverse/Bind shellcode won&amp;rsquo;t prove effective for Windows Kernel Exploitation. More often than not, practitioners resort to techniques such as Nulling out ACLs, Enabling privileges or Replacing process token.&#xA;TL;DR Link to heading This article concentrates primarily on the &amp;ldquo;Process Token Replacement&amp;rdquo; Shellcode. The concept revolves around locating a privileged process and transferring its token to an unprivileged process, usually the parent process. (It&amp;rsquo;s important to note that an exploit (exploit.</description>
    </item>
    <item>
      <title>From read@GLIBC to RCE in X86_64</title>
      <link>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</link>
      <pubDate>Fri, 29 Nov 2019 17:03:16 +0100</pubDate>
      <guid>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</guid>
      <description>While playing some pwn in HackZone CTF, i figured out a new technique for Arbitrary Code Execution only by using the read function from libc.&#xA;TL;DR Link to heading It&amp;rsquo;s almost impossible for a security research to exploit a binary only with Arbitrary Write, because in real world you need to leak some data (Specially when ASLR is enabled) and then jump to the right place. However i got an idea of how to get RCE using only read@GLIBC (Arbitrary Write) on a X86_64 platform.</description>
    </item>
    <item>
      <title>Sigreturn-Oriented Programming (SROP)</title>
      <link>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</link>
      <pubDate>Sun, 04 Nov 2018 11:23:06 +0100</pubDate>
      <guid>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</guid>
      <description>Sigreturn-oriented programming (SROP) is a exploit development technique used to execute code, this attack employs the same basic assumptions behind the return-oriented programming (ROP) technique.&#xA;TL;DR Link to heading When a signal occurs, the kernel “pauses” the process’s execution in order to jump to a signal handler routine. In order to safely resume the execution after the handler, the context of that process is pushed/saved on the stack (registers, flags, instruction pointer, stack pointer etc).</description>
    </item>
  </channel>
</rss>
