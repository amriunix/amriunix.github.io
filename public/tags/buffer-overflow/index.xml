<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buffer-Overflow on AMRIUNIX</title>
    <link>http://localhost:1313/tags/buffer-overflow/</link>
    <description>Recent content in Buffer-Overflow on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Nov 2019 17:03:16 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/buffer-overflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From read@GLIBC to RCE in X86_64</title>
      <link>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</link>
      <pubDate>Fri, 29 Nov 2019 17:03:16 +0100</pubDate>
      <guid>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</guid>
      <description>While playing some pwn in HackZone CTF, i figured out a new technique for Arbitrary Code Execution only by using the read function from libc.&#xA;TL;DR Link to heading It&amp;rsquo;s almost impossible for a security research to exploit a binary only with Arbitrary Write, because in real world you need to leak some data (Specially when ASLR is enabled) and then jump to the right place. However i got an idea of how to get RCE using only read@GLIBC (Arbitrary Write) on a X86_64 platform.</description>
    </item>
  </channel>
</rss>
