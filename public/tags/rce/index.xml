<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rce on AMRIUNIX</title>
    <link>http://localhost:1313/tags/rce/</link>
    <description>Recent content in Rce on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Nov 2019 17:03:16 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From read@GLIBC to RCE in X86_64</title>
      <link>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</link>
      <pubDate>Fri, 29 Nov 2019 17:03:16 +0100</pubDate>
      <guid>http://localhost:1313/posts/from-read-glibc-to-rce-x86_64/</guid>
      <description>While playing some pwn in HackZone CTF, i figured out a new technique for Arbitrary Code Execution only by using the read function from libc.&#xA;TL;DR Link to heading It&amp;rsquo;s almost impossible for a security research to exploit a binary only with Arbitrary Write, because in real world you need to leak some data (Specially when ASLR is enabled) and then jump to the right place. However i got an idea of how to get RCE using only read@GLIBC (Arbitrary Write) on a X86_64 platform.</description>
    </item>
    <item>
      <title>CVE-2007-2447 - Samba usermap script</title>
      <link>http://localhost:1313/posts/cve-2007-2447-samba-usermap-script/</link>
      <pubDate>Fri, 03 Aug 2018 22:00:06 +0100</pubDate>
      <guid>http://localhost:1313/posts/cve-2007-2447-samba-usermap-script/</guid>
      <description>Samba 3.0.0 - 3.0.25rc3 are subject for Remote Command Injection Vulnerability (CVE-2007-2447), allows remote attackers to execute arbitrary commands by specifying a username containing shell meta characters.&#xA;TL;DR Link to heading The root cause is passing unfiltered user input provided via MS-RPC calls to /bin/sh when invoking non-default &amp;quot;username map script&amp;quot; configuration option in smb.conf, so no authentication is needed to exploit this vulnerability.&#xA;Source Link to heading ./source/lib/username.c&#xA;/* first try the username map script */ if ( *cmd ) { char **qlines; pstring command; int numlines, ret, fd; pstr_sprintf( command, &amp;#34;%s \&amp;#34;%s\&amp;#34;&amp;#34;, cmd, user ); DEBUG(10,(&amp;#34;Running [%s]\n&amp;#34;, command)); ret = smbrun(command, &amp;amp;fd); DEBUGADD(10,(&amp;#34;returned [%d]\n&amp;#34;, ret)); if ( ret !</description>
    </item>
  </channel>
</rss>
