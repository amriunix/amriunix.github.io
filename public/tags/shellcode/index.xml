<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shellcode on AMRIUNIX</title>
    <link>http://localhost:1313/tags/shellcode/</link>
    <description>Recent content in Shellcode on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Feb 2020 16:25:30 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/shellcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Kernel Shellcode : TokenStealer</title>
      <link>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</link>
      <pubDate>Mon, 03 Feb 2020 16:25:30 +0100</pubDate>
      <guid>http://localhost:1313/posts/windows-kernel-shellcode-tokenstealer/</guid>
      <description>A typical approach involving Reverse/Bind shellcode won&amp;rsquo;t prove effective for Windows Kernel Exploitation. More often than not, practitioners resort to techniques such as Nulling out ACLs, Enabling privileges or Replacing process token.&#xA;TL;DR Link to heading This article concentrates primarily on the &amp;ldquo;Process Token Replacement&amp;rdquo; Shellcode. The concept revolves around locating a privileged process and transferring its token to an unprivileged process, usually the parent process. (It&amp;rsquo;s important to note that an exploit (exploit.</description>
    </item>
  </channel>
</rss>
