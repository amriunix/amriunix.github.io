<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Srop on AMRIUNIX</title>
    <link>http://localhost:1313/tags/srop/</link>
    <description>Recent content in Srop on AMRIUNIX</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Nov 2018 11:23:06 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/srop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sigreturn-Oriented Programming (SROP)</title>
      <link>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</link>
      <pubDate>Sun, 04 Nov 2018 11:23:06 +0100</pubDate>
      <guid>http://localhost:1313/posts/sigreturn-oriented-programming-srop/</guid>
      <description>Sigreturn-oriented programming (SROP) is a exploit development technique used to execute code, this attack employs the same basic assumptions behind the return-oriented programming (ROP) technique.&#xA;TL;DR Link to heading When a signal occurs, the kernel “pauses” the process’s execution in order to jump to a signal handler routine. In order to safely resume the execution after the handler, the context of that process is pushed/saved on the stack (registers, flags, instruction pointer, stack pointer etc).</description>
    </item>
  </channel>
</rss>
